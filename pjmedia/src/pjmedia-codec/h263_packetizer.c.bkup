/* $Id: h263_packetizer.c 4006 2012-04-02 08:40:54Z nanang $ */
/* 
 * Copyright (C) 2008-2011 Teluu Inc. (http://www.teluu.com)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
 */
#include <pjmedia-codec/h263_packetizer.h>
#include <pjmedia/types.h>
#include <pj/assert.h>
#include <pj/errno.h>
#include <pj/string.h>
#include <pj/list.h>
#include <pj/math.h>

#if defined(PJMEDIA_HAS_VIDEO) && (PJMEDIA_HAS_VIDEO != 0)


#define THIS_FILE	"h263_packetizer.c"

#if 0
/* H.263 packetizer definition */
struct pjmedia_h263_packetizer {
    /* Current settings */
    pjmedia_h263_packetizer_cfg cfg;
    
    /* Unpacketizer state */
    unsigned	    unpack_last_sync_pos;
    pj_bool_t	    unpack_prev_lost;

    int width;
	int height;
	unsigned pict_type;
};
#endif

PJ_DEF(pj_status_t) pjmedia_h263_1998_packetize(pjmedia_h263_packetizer *pktz,
    pj_uint8_t *bits,
    pj_size_t bits_len,
    unsigned *pos,
    const pj_uint8_t **payload,
	pj_size_t *payload_len);

PJ_DEF(pj_status_t) pjmedia_h263_1998_unpacketize (pjmedia_h263_packetizer *pktz,
												const pj_uint8_t *payload,
												pj_size_t payload_len,
												pj_uint8_t *bits,
												pj_size_t bits_size,
												unsigned *pos);
PJ_DEF(pj_status_t) pjmedia_h263_1996_packetize(pjmedia_h263_packetizer *pktz,
									pj_uint8_t *bits,
									pj_size_t bits_len,
									unsigned *pos,
									pj_uint8_t **payload,
									pj_size_t *payload_len);
										
PJ_DEF(pj_status_t) pjmedia_h263_1996_unpacketize (pjmedia_h263_packetizer *pktz,
			const pj_uint8_t *payload,
			pj_size_t payload_len,
			pj_uint8_t *bits,
			pj_size_t bits_size,
			unsigned *pos);
			 
/* ======================================================================================================== */

struct fragment {
  unsigned length;
  unsigned mbNum;
};
typedef struct list_node
{
    PJ_DECL_LIST_MEMBER(struct list_node);
    struct fragment f;
} list_node;
typedef pj_list FragmentListType;
typedef struct RFC2190Packetizer
{
    unsigned char * m_buffer;
    pj_size_t m_bufferSize;
    pj_size_t m_bufferLen;

    unsigned int TR;
    unsigned int frameSize;
    int iFrame;
    int annexD, annexE, annexF, annexG, pQuant, cpm;
    int macroblocksPerGOB;

    FragmentListType fragments;     // use list because we want fast insert and delete
    list_node *currFrag;
    unsigned char * fragPtr;

    unsigned m_currentMB;
    unsigned m_currentBytes;
} RFC2190Packetizer;

#define MAX_PACKET_LEN 1024

const unsigned char PSC[3]      = { 0x00, 0x00, 0x80 };
const unsigned char PSC_Mask[3] = { 0xff, 0xff, 0xfc };

static int MacroblocksPerGOBTable[] = {
    -1,  // forbidden
    -1,  // sub-QCIF
     (144 / 16) *  (176 / 16),  //  QCIF = 99
     (288 / 16) *  (352 / 16),  //  CIF  = 396
     (576 / 32) *  (704 / 32),  //  4CIF = 396
    (1408 / 64) * (1152 / 64),  //  16CIF = 396
    -1,  // Reserved
    -1   // extended
};

pj_bool_t InitRFC2190Packetizer(RFC2190Packetizer *ctx);
pj_bool_t GetPacket(RFC2190Packetizer *ctx, pj_uint8_t *bits, pj_size_t bits_len, unsigned *pos,
	pj_size_t *payload_len, unsigned int flags);
//unsigned char * GetBuffer() { return m_buffer; }
//size_t GetMaxSize() { return m_bufferSize; }
pj_bool_t SetLength(RFC2190Packetizer *ctx, size_t newLen, size_t bits_len);
void RTPCallBack(RFC2190Packetizer *ctx, void * data, int size, int mbCount);

static int FindByteAlignedCode(const unsigned char * base, int len, const unsigned char * code, const unsigned char * mask, int codeLen)
{
  const unsigned char * ptr = base;
  while (len > codeLen) {
    int i;
    for (i = 0; i < codeLen; ++i) {
      if ((ptr[i] & mask[i]) != code[i])
        break;
    }
    if (i == codeLen)
      return (int)(ptr - base);
    ++ptr;
    --len;
  }
  return -1;
}

typedef struct msgb
{
        struct msgb *b_prev;
        struct msgb *b_next;
        struct msgb *b_cont;
        struct datab *b_datap;
        unsigned char *b_rptr;
        unsigned char *b_wptr;
        uint32_t reserved1;
        uint32_t reserved2;

        struct timeval timestamp;
        //ortp_recv_addr_t recv_addr;
} mblk_t;

static void add_rfc2190_header(pj_uint8_t *p, pjmedia_h263_packetizer *pktz){
        unsigned char header[4];
        //header = (unsigned char *)malloc(4);
        //memset(header, 0, 4);
        // assume video size is CIF or QCIF
        if (pktz->width == 352 && pktz->height == 288) header[1] = 0x60;
        else header[1] = 0x40;
        if (pktz->pict_type != FF_I_TYPE) header[1] |= 0x10;
        //header->b_wptr += 4;
        //header->b_cont = *packet;
        //*packet = header;
		memcpy(p, header, 4);
		p += 4;
}

static int FindPSC(const unsigned char * base, int len)
{ return FindByteAlignedCode(base, len, PSC, PSC_Mask, sizeof(PSC)); }

pj_bool_t InitRFC2190Packetizer(RFC2190Packetizer *ctx)
{
	if(!ctx) return PJ_FALSE;
	pj_list_init(&ctx->fragments);
	ctx->m_currentMB = 0;
	ctx->m_currentBytes = 0;
	return PJ_TRUE;
}

pj_bool_t SetLength(RFC2190Packetizer *ctx, size_t newLen, size_t bits_len)
{
	if(!ctx) return PJ_FALSE;
    ctx->m_bufferLen = newLen;

    // do a sanity check on the fragment data - must be equal to maxLen
    {
      unsigned long len = 0;
	  int i=0;
      list_node *p;
	  for (i=0, p=ctx->fragments.next; (unsigned int)p != (unsigned int)(&ctx->fragments); ++i, p=p->next) {
		len += p->f.length;
	  }
	
//    if (len != maxLen)
//      cout << "rfc2190: mismatch between encoder length and fragment length - " << len << "/" << maxLen << endl;
    }

  const unsigned char * data = ctx->m_buffer;
  size_t dataLen = bits_len;

  // make sure data is at least long enough to contain PSC, TR & minimum PTYPE, PQUANT and CPM
  if (dataLen < 7) {
	printf("%s:-------------SL1------------\n", THIS_FILE);
    return PJ_FALSE;
  }

  // ensure data starts with PSC
  //     0         1         2
  // 0000 0000 0000 0000 1000 00..
  if (FindPSC(data, dataLen) != 0) {
	printf("%s:-------------SL2------------\n", THIS_FILE);
    return PJ_FALSE;
  }
  // get TR
  //     2         3
  // .... ..XX XXXX XX..
  ctx->TR = ((data[2] << 6) & 0xfc) | (data[3] >> 2);

  // make sure mandatory part of PTYPE is present
  //     3
  // .... ..10
  if ((data[3] & 0x03) != 2) {
	printf("%s:-------------SL3------------\n", THIS_FILE);
    return PJ_FALSE;
  }

  // we don't do split screen, document indicator, full picture freeze
  //     4
  // XXX. ....
  if ((data[4] & 0xe0) != 0) {
	printf("%s:-------------SL4------------\n", THIS_FILE);
    return PJ_FALSE;
  }
  // get image size
  //     4
  // ...X XX..
  ctx->frameSize = (data[4] >> 2) & 0x7;
  ctx->macroblocksPerGOB = MacroblocksPerGOBTable[ctx->frameSize];
  if (ctx->macroblocksPerGOB == -1) {
	printf("%s:-------------SL5------------\n", THIS_FILE);
    return PJ_FALSE;
  }
  // get I-frame flag
  //     4
  // .... ..X.
  ctx->iFrame = (data[4] & 2) == 0;

  // get annex bits:
  //   Annex D - unrestricted motion vector mode
  //   Annex E - syntax-based arithmetic coding mode
  //   Annex F - advanced prediction mode
  //   Annex G - PB-frames mode
  //
  //     4         5
  // .... ...X XXX. ....
  ctx->annexD = data[4] & 0x01;
  ctx->annexE = data[5] & 0x80;
  ctx->annexF = data[5] & 0x40;
  ctx->annexG = data[5] & 0x20;

  // annex G not supported
  if (ctx->annexG) {
	printf("%s:-------------SL6------------\n", THIS_FILE);
    return PJ_FALSE;
  }

  // get PQUANT
  //     5
  // ...X XXXX
  ctx->pQuant = data[5] & 0x1f;

  // get CPM
  //     6
  // X... ....
  ctx->cpm = (data[6] & 0x80) != 0;

  // ensure PEI is always 0
  //     6
  // .X.. ....
  if ((data[6] & 0x40) != 0) {
	printf("%s:-------------SL7------------\n", THIS_FILE);
      return PJ_FALSE;
  }
    // split fragments longer than the maximum
    list_node *r;
    int i=0;
    for (i=0, r=ctx->fragments.next; (unsigned int)r != (unsigned int)(&ctx->fragments); ++i, r=r->next) {
        while (r->f.length > 1024) {
            int oldLen = r->f.length;
            int newLen = 1024;
            if ((oldLen - newLen) < 1024)
              newLen = oldLen / 2;
		    struct fragment oldFrag;
		    oldFrag.length = r->f.length;
		    oldFrag.mbNum = r->f.mbNum;
            pj_list_erase(r);
         
            struct fragment frag;
            frag.length = newLen;
            frag.mbNum  = oldFrag.mbNum;
            pj_list_push_back(&ctx->fragments, &frag);
          
            struct fragment frag2;
            frag2.length = oldLen - newLen;
            frag2.mbNum  = oldFrag.mbNum;
            pj_list_push_back(&ctx->fragments, &frag2);
          // for loop will move r to next entry
       }
    }

    // reset pointers to start of fragments
    ctx->currFrag = ctx->fragments.next;
    ctx->fragPtr = ctx->m_buffer;

    return PJ_TRUE;
}

pj_bool_t GetPacket(RFC2190Packetizer *ctx, pj_uint8_t *bits, pj_size_t bits_len, unsigned *pos,
    pj_size_t *payload_len, unsigned int flags)
{
	pj_uint8_t *p, *end;

    pj_assert(bits && pos && payload_len);
    pj_assert(*pos <= bits_len);

    p = bits + *pos;
    end = bits + bits_len;
	ctx->fragPtr = p;
    while ((pj_list_size(&ctx->fragments) != 0) && ((unsigned int)(ctx->currFrag->next) != (unsigned int)(&ctx->currFrag))) {
    //while ((pj_list_size(&ctx->fragments) != 0)  {
        // set the timestamp
		struct fragment frag ;
		frag.length = (ctx->currFrag)->f.length;
		frag.mbNum = (ctx->currFrag)->f.mbNum;
	    ctx->currFrag = ctx->currFrag->next;

        // if this fragment starts with a GBSC, then output as Mode A else output as Mode B
        int modeA = ((frag.length >= 3) &&
                  (ctx->fragPtr[0] == 0x00) &&
                  (ctx->fragPtr[1] == 0x00) &&
                  ((ctx->fragPtr[2] & 0x80) == 0x80));

	    size_t payloadRemaining = (end - ctx->fragPtr);

        // offset of the data
        size_t offs = modeA ? 4 : 8;

        // make sure RTP storage is sufficient
        if ((frag.length + offs) > payloadRemaining) {
          //std::cout << "no room for Mode " << (modeA ? 'A' : 'B') << " frame - " << (frag.length+offs) << " > " << payloadRemaining << std::endl;
          //continue;
            printf("%s:-------------GP1------------%d, %d, %d\n", THIS_FILE, (int)frag.length, (int)offs, (int)payloadRemaining);
			return PJ_FALSE;
        }

        // set size of final frame
        //outputFrame.SetPayloadSize(offs + frag.length);

        // get ptr to payload that is about to be created
        unsigned char * ptr = ctx->fragPtr;

        if (modeA) {
          int sBit = 0;
          int eBit = 0;
          ptr[0] = (unsigned char)(((sBit & 7) << 3) | (eBit & 7));
          ptr[1] = (unsigned char)((ctx->frameSize << 5) | (ctx->iFrame ? 0 : 0x10) | (ctx->annexD ? 0x08 : 0) | (ctx->annexE ? 0x04 : 0) | (ctx->annexF ? 0x02 : 0));
          ptr[2] = ptr[3] = 0;
        }
        else
        {
          // create the Mode B header
          int sBit = 0;
          int eBit = 0;
          int gobn = frag.mbNum / ctx->macroblocksPerGOB;
          int mba  = frag.mbNum % ctx->macroblocksPerGOB;
          ptr[0] = (unsigned char)(0x80 | ((sBit & 7) << 3) | (eBit & 7));
          ptr[1] = (unsigned char)(ctx->frameSize << 5);
          ptr[2] = (unsigned char)(((gobn << 3) & 0xf8) | ((mba >> 6) & 0x7));
          ptr[3] = (unsigned char)((mba << 2) & 0xfc);
          ptr[4] = (ctx->iFrame ? 0 : 0x80) | (ctx->annexD ? 0x40 : 0) | (ctx->annexE ? 0x20 : 0) | (ctx->annexF ? 0x010: 0);
          ptr[5] = ptr[6] = ptr[7] = 0;
        }

        // copy the data
        memcpy(ptr + offs, ctx->fragPtr, frag.length);

        ctx->fragPtr += frag.length;
	    // set marker bit
	    flags = 0;
	    if (!ctx->currFrag) {
	      //flags |= PluginCodec_ReturnCoderLastFrame;
	      //outputFrame.SetMarker(1);
	    }
		if (ctx->iFrame) ;
	      //flags |= PluginCodec_ReturnCoderIFrame;

	    return PJ_TRUE;
	}

    return PJ_FALSE;
}

void RTPCallBack(RFC2190Packetizer *ctx, void * data, int size, int mbCount)
{
  // sometimes, FFmpeg encodes the same frame multiple times
  // we need to detect this in order to avoid duplicating the encoded data
  if ((data == ctx->m_buffer) && ((pj_list_size(&ctx->fragments) != 0))) {
    ctx->m_currentMB = 0;
    ctx->m_currentBytes = 0;
    //fragments.resize(0);
    list_node * r;
    int i=0;
    for (i=0, r=ctx->fragments.next; r; ++i, r=r->next) {
	    pj_list_erase(r);
	}
  }

  // add the fragment to the list
  struct fragment frag;
  frag.length = size;
  frag.mbNum  = ctx->m_currentMB;
  pj_list_push_back(&ctx->fragments, &frag);

  ctx->m_currentMB += mbCount;
  ctx->m_currentBytes += size;
}

/* ========================================================================================= */
#define DPKT_MAX_PKTS 512
#define DPKT_MAX_PKT_SZ 1024

typedef struct RFC2190Depacketizer
{
    /* pj_uint8_t m_packet[DPKT_MAX_PKTS]; */
    pj_uint8_t *m_packet;
    unsigned m_lastSequence;
    pj_bool_t     m_first;
    pj_bool_t     m_skipUntilEndOfFrame;
    unsigned m_lastEbit;
    pj_bool_t     m_isIFrame;
	unsigned m_pktLen;
} RFC2190Depacketizer;

void NewFrame();
pj_bool_t AddPacket(RFC2190Depacketizer *ctx, 
    pjmedia_h263_packetizer *pktz,
    const pj_uint8_t *payload,
	pj_size_t payload_len,
	pj_uint8_t *bits,
	pj_size_t bits_size,
	unsigned *pos);
pj_bool_t IsValid(RFC2190Depacketizer *ctx);
pj_bool_t IsIntraFrame(RFC2190Depacketizer *ctx);
pj_uint8_t * GetBuffer(RFC2190Depacketizer *ctx) { return &ctx->m_packet[0]; }
size_t GetLength(RFC2190Depacketizer *ctx) { return ctx->m_pktLen; }

void InitRFC2190Depacketizer(RFC2190Depacketizer *ctx)
{
  NewFrame(ctx);
}

void NewFrame(RFC2190Depacketizer *ctx)
{
	//if(!ctx->m_packet) {
	//	ctx->m_packet = (pj_uint8_t *)malloc(DPKT_MAX_PKT_SZ);
	//}
	//memset(&ctx->m_packet, 0, DPKT_MAX_PKTS);
	ctx->m_pktLen=0;
	ctx->m_first               = PJ_TRUE;
	ctx->m_skipUntilEndOfFrame = PJ_FALSE;
	ctx->m_lastEbit            = 8;
	ctx->m_isIFrame            = PJ_FALSE;
}

pj_bool_t IsValid(RFC2190Depacketizer *ctx)
{
    if( (ctx->m_pktLen > 2) && 
        (ctx->m_packet[0] == 0) && 
        (ctx->m_packet[1] == 0) && 
        ((ctx->m_packet[2] & 0x80) == 0x80)
      )
	    return PJ_TRUE;
	return PJ_FALSE;
}

pj_bool_t IsIntraFrame(RFC2190Depacketizer *ctx)
{
	if(ctx->m_isIFrame) return PJ_TRUE;
	return PJ_FALSE;
}

pj_bool_t AddPacket(RFC2190Depacketizer *ctx, 
    pjmedia_h263_packetizer *pktz,
    const pj_uint8_t *payload,
	pj_size_t payload_len,
	pj_uint8_t *bits,
	pj_size_t bits_size,
	unsigned *pos)
{
    const pj_uint8_t *p = payload;
    pj_uint8_t *q;

    q = bits + *pos;

    /* Check if this is a missing/lost packet */
    if (payload == NULL) {
	    pktz->unpack_prev_lost = PJ_TRUE;
	    return PJ_TRUE;
    }

    /* H263 payload header size is two octets */
    if (payload_len < 2) {
	    /* Invalid bitstream, discard this payload */
	    pktz->unpack_prev_lost = PJ_TRUE;
	    return PJ_FALSE;
    }

    /* Reset last sync point for every new picture bitstream */
    if (*pos == 0)
	    pktz->unpack_last_sync_pos = 0;
	
    // ignore packets if required
    if (ctx->m_skipUntilEndOfFrame) {
      //if (packet.GetMarker())
      NewFrame(ctx);
      return PJ_FALSE;
    }
#if 0
    // check if packet is in sequence. If not, skip til end of frame
    if (ctx->m_first) {
      NewFrame();    // make sure this is called before "first = false"
      ctx->m_first = PJ_FALSE;
      ctx->m_lastSequence = packet.GetSequenceNumber();
    }
    else {
      ++m_lastSequence;
      if (packet.GetSequenceNumber() != m_lastSequence) {
        m_skipUntilEndOfFrame = true;
        return false;
      }
    }
#endif
    unsigned payloadLen = payload_len;

    // payload must be at least as long as mode A header + 1 byte
    if (payloadLen < 5) {
      ctx->m_skipUntilEndOfFrame = PJ_TRUE;
      return PJ_FALSE;
    }

  unsigned int sbit = (p[0] >> 3) & 0x07;
  unsigned hdrLen;

  char mode;

  // handle mode A frames
  if ((p[0] & 0x80) == 0) {
    ctx->m_isIFrame = (p[1] & 0x10) == 0;
    hdrLen = 4;
    mode = 'A';

#if 0
    // sanity check data
    if (payloadLen < (hdrLen+3) ||
        (payload[hdrLen+0] != 0x00) ||
        (payload[hdrLen+1] != 0x00) ||
        ((payload[hdrLen+2] & 0x80) != 0x80)
       ) {
      return LostSync(requestIFrame, "Mode A packet not starting with GBSC");
    }
#endif
  }

  // handle mode B frames
  else if ((p[0] & 0x40) == 0) {
    if (payloadLen < 9) {
      ctx->m_skipUntilEndOfFrame = PJ_TRUE;
      return PJ_FALSE;
    }
    ctx->m_isIFrame = (p[4] & 0x80) == 0;
    hdrLen = 8;
    mode = 'B';
  }

  // handle mode C frames
  else {
    if (payloadLen < 13) {
      ctx->m_skipUntilEndOfFrame = PJ_TRUE;
      return PJ_FALSE;
    }
    ctx->m_isIFrame = (p[4] & 0x80) == 0;
    hdrLen = 12;
    mode = 'C';
  }

  // if ebit and sbit do not add up, then we have lost sync
  if (((sbit + ctx->m_lastEbit) & 0x7) != 0) {
    ctx->m_skipUntilEndOfFrame = PJ_TRUE;
    return PJ_FALSE;
  }

  unsigned char * src = (unsigned char *)((unsigned int)p + (unsigned int)hdrLen);
  size_t cpyLen = payloadLen - hdrLen;

  // handle first partial byte
  if ((sbit != 0) && (ctx->m_pktLen > 0)) {

    static unsigned char smasks[7] = { 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01 };
    unsigned smask = smasks[sbit-1];
    ctx->m_packet[ctx->m_pktLen-1] |= (*src & smask);
    --cpyLen;
    ++src;
  }


  // copy whole bytes
  if (cpyLen > 0) {
    size_t frameSize = ctx->m_pktLen;
    
    ctx->m_packet = realloc(ctx->m_packet, cpyLen);
	ctx->m_pktLen += cpyLen;
    
   // m_packet.resize(frameSize + cpyLen);
    memcpy(&ctx->m_packet[0] + frameSize, src, cpyLen);
  }

  // keep ebit for next time
  ctx->m_lastEbit = p[0] & 0x07;

  // return 0 if no frame yet, return 1 if frame is available
  return PJ_TRUE;
}

/* ========================================================================================= */
RFC2190Packetizer *rfc2190Pktz;
RFC2190Depacketizer *rfc2190Depktz;

static int get_gbsc_bytealigned(pj_uint8_t *begin, pj_uint8_t *end){
        int i;
        int len = end - begin;
        for (i = len - 2;  /*len + length of scan window*/
           i > 2 + 2; /*length of scan window + 2 avoidance of 1st gob or psc*/
           i--){
                if(*(begin + i) == 0 &&
                   *(begin + i+1) == 0 &&
                   (*(begin + i+2) & 0x80) == 0x80){
                  /*printf("JV psc/gob found! %2x %2x %2x", *(begin + i), *(begin + i+1), *(begin + i + 2));*/
                  return i;
                }
        }
        /*printf("JV no psc or gob found!");*/
        return len;
}

/*
 * Find synchronization point (PSC, slice, GSBC, EOS, EOSBS) in H.263 
 * bitstream.
 */
static pj_uint8_t* find_sync_point(pj_uint8_t *data,
				   pj_size_t data_len)
{
    pj_uint8_t *p = data, *end = data+data_len-1;

    while (p < end && (*p || *(p+1)))
        ++p;

    if (p == end)
        return NULL;
        
    return p;
}


/*
 * Find synchronization point (PSC, slice, GSBC, EOS, EOSBS) in H.263 
 * bitstream, in reversed manner.
 */
static pj_uint8_t* find_sync_point_rev(pj_uint8_t *data,
                                       pj_size_t data_len)
{
    pj_uint8_t *p = data+data_len-2;

    while (p >= data && (*p || *(p+1)))
        --p;

    if (p < data)
        return (data + data_len);
        
    return p;
}


/*
 * Create H263 packetizer.
 */
PJ_DEF(pj_status_t) pjmedia_h263_packetizer_create(
				pj_pool_t *pool,
				const pjmedia_h263_packetizer_cfg *cfg,
				pjmedia_h263_packetizer **p)
{
    pjmedia_h263_packetizer *p_;

    PJ_ASSERT_RETURN(pool && p, PJ_EINVAL);

    //if (cfg && (cfg->mode != PJMEDIA_H263_PACKETIZER_MODE_RFC4629 && cfg->mode != PJMEDIA_H263_PACKETIZER_MODE_RFC2190))
	//    return PJ_ENOTSUP;
	if(!cfg) return PJ_ENOTSUP;
    p_ = PJ_POOL_ZALLOC_T(pool, pjmedia_h263_packetizer);
    if (cfg) {
	    pj_memcpy(&p_->cfg, cfg, sizeof(*cfg));
	    if(cfg->mode == PJMEDIA_H263_PACKETIZER_MODE_RFC2190) {
			rfc2190Pktz = (RFC2190Packetizer *)malloc(sizeof(RFC2190Packetizer));
			rfc2190Depktz = (RFC2190Depacketizer *)malloc(sizeof(RFC2190Depacketizer));
			memset(rfc2190Pktz, 0, sizeof(RFC2190Packetizer));
			memset(rfc2190Depktz, 0, sizeof(RFC2190Depacketizer));
			InitRFC2190Packetizer(rfc2190Pktz);
			InitRFC2190Depacketizer(rfc2190Depktz);
			p_->cfg.mtu = PJMEDIA_MAX_VID_PAYLOAD_SIZE;
#define H263_MAX_ENCODE_SIZE 20000
			p_->max_encoded_size = H263_MAX_ENCODE_SIZE;
			//unsigned *rorig = (unsigned *)malloc(p_->cfg.mtu+64+4);
			p_->pktOrig= (unsigned *)malloc(p_->max_encoded_size+64+4);
			unsigned  *r = (unsigned *)(((unsigned)(p_->pktOrig) + 64) & (~63));
			p_->packet = (pj_uint8_t *)r;
		}
    } else {
	p_->cfg.mode = PJMEDIA_H263_PACKETIZER_MODE_RFC4629;
	p_->cfg.mtu = PJMEDIA_MAX_VID_PAYLOAD_SIZE;
    }

    *p = p_;

    return PJ_SUCCESS;
}


/*
 * Generate an RTP payload from H.263 frame bitstream, in-place processing.
 */
PJ_DEF(pj_status_t) pjmedia_h263_packetize(pjmedia_h263_packetizer *pktz,
                                           pj_uint8_t *bits,
                                           pj_size_t bits_len,
                                           unsigned *pos,
                                           const pj_uint8_t **payload,
                                           pj_size_t *payload_len) {
    if (pktz->cfg.mode == PJMEDIA_H263_PACKETIZER_MODE_RFC4629) {
        return pjmedia_h263_1998_packetize(pktz, bits, bits_len, pos, payload, payload_len);
    } else if (pktz->cfg.mode == PJMEDIA_H263_PACKETIZER_MODE_RFC2190) {
        return pjmedia_h263_1996_packetize(pktz, bits, bits_len, pos, (pj_uint8_t **)payload, payload_len);
    }
	return PJ_SUCCESS;
}

/*
 * Generate an RTP payload from H.263 frame bitstream, in-place processing.
 */
PJ_DEF(pj_status_t) pjmedia_h263_1998_packetize(pjmedia_h263_packetizer *pktz,
					   pj_uint8_t *bits,
                                           pj_size_t bits_len,
                                           unsigned *pos,
                                           const pj_uint8_t **payload,
                                           pj_size_t *payload_len)
{
    pj_uint8_t *p, *end;

    pj_assert(pktz && bits && pos && payload && payload_len);
    pj_assert(*pos <= bits_len);

    p = bits + *pos;
    end = bits + bits_len;

    //printf_hex_with_text("[pjmedia_h263_1998_packetize] bitstream", bits, bits_len);
    /* Put two octets payload header */
    if ((end-p > 2) && *p==0 && *(p+1)==0) {
        /* The bitstream starts with synchronization point, just override
         * the two zero octets (sync point mark) for payload header.
         */
        *p = 0x04;
    } else {
        /* Not started in synchronization point, we will use two octets
         * preceeding the bitstream for payload header!
         */

	if (*pos < 2) {
	    /* Invalid H263 bitstream, it's not started with PSC */
	    return PJ_EINVAL;
	}

	p -= 2;
        *p = 0;
    }
    *(p+1) = 0;

    /* When bitstream truncation needed because of payload length/MTU 
     * limitation, try to use sync point for the payload boundary.
     */
    if (end-p > pktz->cfg.mtu) {
	end = find_sync_point_rev(p+2, pktz->cfg.mtu-2);
    }

    *payload = p;
    *payload_len = end-p;
    *pos = end - bits;

    //printf_hex_with_text("[pjmedia_h263_1998_packetize] payload", *payload, *payload_len);
    
    return PJ_SUCCESS;
}
/* Hieu add */

/*
 * Append an RTP payload to a H.263 picture bitstream.
 */
PJ_DEF(pj_status_t) pjmedia_h263_unpacketize (pjmedia_h263_packetizer *pktz,
                                              const pj_uint8_t *payload,
                                              pj_size_t payload_len,
                                              pj_uint8_t *bits,
                                              pj_size_t bits_size,
                                              unsigned *pos) {
    if (pktz->cfg.mode == PJMEDIA_H263_PACKETIZER_MODE_RFC4629) {
        return pjmedia_h263_1998_unpacketize(pktz, payload, payload_len, bits, bits_size, pos);
    } else if (pktz->cfg.mode == PJMEDIA_H263_PACKETIZER_MODE_RFC2190) {
        return pjmedia_h263_1996_unpacketize(pktz, payload, payload_len, bits, bits_size, pos);
    }
	return PJ_SUCCESS;
}

/* End Hieu adding */

/*
 * Append an RTP payload to a H.263 picture bitstream.
 */
PJ_DEF(pj_status_t) pjmedia_h263_1998_unpacketize (pjmedia_h263_packetizer *pktz,
					      const pj_uint8_t *payload,
                          pj_size_t payload_len,
                          pj_uint8_t *bits,
                          pj_size_t bits_size,
					      unsigned *pos)
{
    pj_uint8_t P, V, PLEN;
    const pj_uint8_t *p = payload;
    pj_uint8_t *q;

    q = bits + *pos;

   // printf("-------------%s: Inside pjmedia_h263_1998_unpacketize-------------\n", THIS_FILE);
    /* Check if this is a missing/lost packet */
    if (payload == NULL) {
	pktz->unpack_prev_lost = PJ_TRUE;
	return PJ_SUCCESS;
    }

    //printf_hex_with_text("[pjmedia_h263_1998_unpacketize] payload", payload, payload_len);
    /* H263 payload header size is two octets */
    if (payload_len < 2) {
	/* Invalid bitstream, discard this payload */
	pktz->unpack_prev_lost = PJ_TRUE;
	return PJ_EINVAL;
    }

    /* Reset last sync point for every new picture bitstream */
    if (*pos == 0)
	pktz->unpack_last_sync_pos = 0;

    /* Get payload header info */
    P = *p & 0x04;
    V = *p & 0x02;
    PLEN = ((*p & 0x01) << 5) + ((*(p+1) & 0xF8)>>3);

    /* Get start bitstream pointer */
    p += 2;	    /* Skip payload header */
    if (V)
        p += 1;	    /* Skip VRC data */
    if (PLEN)
        p += PLEN;  /* Skip extra picture header data */

    /* Get bitstream length */
    if (payload_len > (pj_size_t)(p - payload)) {
	payload_len -= (p - payload);
    } else {
	/* Invalid bitstream, discard this payload */
	pktz->unpack_prev_lost = PJ_TRUE;
	return PJ_EINVAL;
    }

    /* Validate bitstream length */
    if (bits_size < *pos + payload_len + 2) {
	/* Insufficient bistream buffer, discard this payload */
	pj_assert(!"Insufficient H.263 bitstream buffer");
	pktz->unpack_prev_lost = PJ_TRUE;
	return PJ_ETOOSMALL;
    }

    /* Start writing bitstream */

    /* No sync point flag */
    if (!P) {
	if (*pos == 0) {
	    /* Previous packet must be lost */
	    pktz->unpack_prev_lost = PJ_TRUE;

	    /* If there is extra picture header, let's use it. */
	    if (PLEN) {
		/* Write two zero octets for PSC */
		*q++ = 0;
		*q++ = 0;
		/* Copy the picture header */
		p -= PLEN;
		pj_memcpy(q, p, PLEN);
		p += PLEN;
		q += PLEN;
	    }
	} else if (pktz->unpack_prev_lost) {
	    /* If prev packet was lost, revert the bitstream pointer to
	     * the last sync point.
	     */
	    pj_assert(pktz->unpack_last_sync_pos <= *pos);
	    q = bits + pktz->unpack_last_sync_pos;
	}

	/* There was packet lost, see if this payload contain sync point
	 * (usable data).
	 */
	if (pktz->unpack_prev_lost) {
	    pj_uint8_t *sync;
	    sync = find_sync_point((pj_uint8_t*)p, payload_len);
	    if (sync) {
		/* Got sync point, update P/sync-point flag */
		P = 1;
		/* Skip the two zero octets */
		sync += 2;
		/* Update payload length and start bitstream pointer */
		payload_len -= (sync - p);
		p = sync;
	    } else {
		/* No sync point in it, just discard this payload */
		return PJ_EIGNORED;
	    }
	}
    }

    /* Write two zero octets when payload flagged with sync point */
    if (P) {
	pktz->unpack_last_sync_pos = q - bits;
        *q++ = 0;
        *q++ = 0;
    }

    /* Write the payload to the bitstream */
    pj_memcpy(q, p, payload_len);
    q += payload_len;

    /* Update the bitstream writing offset */
    *pos = q - bits;

    pktz->unpack_prev_lost = PJ_FALSE;

    //printf_hex_with_text("[pjmedia_h263_1998_unpacketize] bitstream", bits, bits_size);
    
    return PJ_SUCCESS;
}

/* Hieu add */
PJ_DEF(pj_status_t) pjmedia_h263_1996_packetize(pjmedia_h263_packetizer *pktz,
                                                pj_uint8_t *bits,
                                                pj_size_t bits_len,
                                                unsigned *pos,
                                                pj_uint8_t **payload,
                                                pj_size_t *payload_len)
{
	pj_uint8_t *p, *end;

    pj_assert(pktz && bits && pos && payload && payload_len);
    pj_assert(*pos <= bits_len);
	unsigned flags=0;
	
    p = bits + *pos;
    end = bits + bits_len;
	rfc2190Pktz->m_buffer = p;
	rfc2190Pktz->m_bufferLen = (end - p);
	//printf("------------------%s: Inside pjmedia_h263_1996_packetize---------------, %d\n", THIS_FILE, (int)(end-p));
#if 0
    // add the fragment to the list
	  struct fragment frag;
	  frag.length = size;
	  frag.mbNum  = rfc2190Pktz->m_currentMB;
	  pj_list_push_back(&ctx->fragments, &frag);
	  rfc2190Pktz->m_currentMB += mbCount;
	  m_currentBytes += size;
    // push the encoded frame through the m_packetizer
	if (SetLength(rfc2190Pktz, rfc2190Pktz->m_bufferLen, bits_len) == PJ_FALSE) {
	    printf("------------------%s: SetLength failed---------------\n", THIS_FILE);
	    return PJ_EINVAL;
	}

	if (GetPacket(rfc2190Pktz, bits, bits_len, pos, payload_len, flags) == PJ_FALSE) {
	    printf("------------------%s: GetPacket failed---------------\n", THIS_FILE);
	    struct fragment frag ;
		frag.length = rfc2190Pktz->m_bufferLen;
		frag.mbNum = 1;
		rfc2190Pktz->fragPtr = p;
        // if this fragment starts with a GBSC, then output as Mode A else output as Mode B
        int modeA = ((frag.length >= 3) &&
                  (rfc2190Pktz->fragPtr[0] == 0x00) &&
                  (rfc2190Pktz->fragPtr[1] == 0x00) &&
                  ((rfc2190Pktz->fragPtr[2] & 0x80) == 0x80));

	    size_t payloadRemaining = (end - rfc2190Pktz->fragPtr);

        // offset of the data
        size_t offs = modeA ? 4 : 8;

        // make sure RTP storage is sufficient
        if ((frag.length + offs) > payloadRemaining) {
          //std::cout << "no room for Mode " << (modeA ? 'A' : 'B') << " frame - " << (frag.length+offs) << " > " << payloadRemaining << std::endl;
          //continue;
            printf("%s:-------------P1------------%d, %d, %d\n", THIS_FILE, (int)frag.length, (int)offs, (int)payloadRemaining);
			return PJ_EINVAL;
        }

        // set size of final frame
        //outputFrame.SetPayloadSize(offs + frag.length);

        // get ptr to payload that is about to be created
        unsigned char * ptr = rfc2190Pktz->fragPtr;

        if (modeA) {
          int sBit = 0;
          int eBit = 0;
          ptr[0] = (unsigned char)(((sBit & 7) << 3) | (eBit & 7));
          ptr[1] = (unsigned char)((rfc2190Pktz->frameSize << 5) | (rfc2190Pktz->iFrame ? 0 : 0x10) | (rfc2190Pktz->annexD ? 0x08 : 0) | (rfc2190Pktz->annexE ? 0x04 : 0) | (rfc2190Pktz->annexF ? 0x02 : 0));
          ptr[2] = ptr[3] = 0;
        }
        else
        {
          // create the Mode B header
          int sBit = 0;
          int eBit = 0;
          int gobn = frag.mbNum / rfc2190Pktz->macroblocksPerGOB;
          int mba  = frag.mbNum % rfc2190Pktz->macroblocksPerGOB;
          ptr[0] = (unsigned char)(0x80 | ((sBit & 7) << 3) | (eBit & 7));
          ptr[1] = (unsigned char)(rfc2190Pktz->frameSize << 5);
          ptr[2] = (unsigned char)(((gobn << 3) & 0xf8) | ((mba >> 6) & 0x7));
          ptr[3] = (unsigned char)((mba << 2) & 0xfc);
          ptr[4] = (rfc2190Pktz->iFrame ? 0 : 0x80) | (rfc2190Pktz->annexD ? 0x40 : 0) | (rfc2190Pktz->annexE ? 0x20 : 0) | (rfc2190Pktz->annexF ? 0x010: 0);
          ptr[5] = ptr[6] = ptr[7] = 0;
        }

        // copy the data
        memcpy(ptr + offs, rfc2190Pktz->fragPtr, frag.length);
		
		/* When bitstream truncation needed because of payload length/MTU 
	     * limitation, try to use sync point for the payload boundary.
	     */
	    if (end-p > pktz->cfg.mtu) {
		end = find_sync_point_rev(p+offs, pktz->cfg.mtu-offs);
	    }
	    //return PJ_SUCCESS; // Huh?
	}
#else
	
	if(*pos == 0) {
		if(bits_len < pktz->max_encoded_size) {
	        memcpy(pktz->packet, bits, bits_len);
        }
        else {
			pktz->max_encoded_size = bits_len;
			pktz->pktOrig = (unsigned *)realloc(pktz->pktOrig, pktz->max_encoded_size+64+4);
			unsigned  *r = (unsigned *)(((unsigned)(pktz->pktOrig) + 64) & (~63));
			pktz->packet = (pj_uint8_t *)r;
			memcpy(pktz->packet, bits, bits_len);
        }
	}
	const unsigned char * data = pktz->packet + *pos;
    {
	    unsigned len = get_gbsc_bytealigned((pj_uint8_t *)data, 
	                   (pj_uint8_t *)PJ_MIN(((unsigned)(data))+pktz->cfg.mtu,((unsigned)(pktz->packet))+bits_len));
	    unsigned char header[4];
		memset(header, 0, 4);
        // assume video size is CIF or QCIF
        if (pktz->width == 352 && pktz->height == 288) header[1] = 0x60;
        else header[1] = 0x40;
        
        int iFrame = ((data[4] & 2) == 0);
		if(!iFrame) header[1] |= 0x10;
        *payload = p;
		memcpy(p, header, 4);
		p += 4;
		memcpy(p, data, len);
		p += len;
		*payload_len = (4 + len);
		unsigned pos1 = *pos;
		*pos = (p - bits-4) < bits_len?(p-bits-4):bits_len;
		//printf("bits: 0x%02x, p: 0x%02x, payload_len: %d, pos1: %d, pos: %d, bits_len: %d, iFrame:%d\n", 
		//    bits, p, *payload_len, pos1, *pos, bits_len, pktz->pict_type);
	}
#endif
    return PJ_SUCCESS;
}

PJ_DEF(pj_status_t) pjmedia_h263_1996_unpacketize (pjmedia_h263_packetizer *pktz,
                                                   const pj_uint8_t *payload,
                                                   pj_size_t payload_len,
                                                   pj_uint8_t *bits,
                                                   pj_size_t bits_size,
                                                   unsigned *pos)
{
#if 0
    printf("-------------%s: Inside pjmedia_h263_1996_unpacketize-------------\n", THIS_FILE);
	if(AddPacket(rfc2190Depktz, pktz, payload, payload_len, bits, bits_size, pos) != PJ_TRUE) {
		printf("%s: AddPacket returns false", THIS_FILE);
	    NewFrame(rfc2190Depktz);
	    return PJ_SUCCESS;
	}
	
	if(IsValid(rfc2190Depktz) != PJ_TRUE) {
		printf("%s: IsValid returns false", THIS_FILE);
		NewFrame(rfc2190Depktz);
	    return PJ_SUCCESS;
	}
	
    return PJ_SUCCESS;
#else
    //return pjmedia_h263_1998_unpacketize (pktz, payload, payload_len, bits,
	//                          bits_size, pos);
	unsigned char mode; 
	unsigned hdrLen;
	int iFrame=0;
    const pj_uint8_t *p = payload;
    pj_uint8_t *q;
	
    q = bits + *pos;

   // printf("-------------%s: Inside pjmedia_h263_1996_unpacketize-------------\n", THIS_FILE);
    /* Check if this is a missing/lost packet */
    if (payload == NULL) {
	    pktz->unpack_prev_lost = PJ_TRUE;
	     return PJ_SUCCESS;
    }

    /* H263-1996 payload header size is atleast 4 octets */
    if (payload_len < 4) {
	    /* Invalid bitstream, discard this payload */
	    pktz->unpack_prev_lost = PJ_TRUE;
	    return PJ_EINVAL;
    }

    /* Reset last sync point for every new picture bitstream */
    if (*pos == 0)
	    pktz->unpack_last_sync_pos = 0;
	if ((p[0] & 0x80) == 0) {
		iFrame = ((p[1] & 0x10) == 0);
	    hdrLen = 4;
	    mode = 'A';
	} 
	else if ((p[0] & 0x40) == 0) {
		iFrame = ((p[4] & 0x80) == 0);
	    hdrLen = 8;
	    mode = 'B';
	} 
	else {
	    iFrame = ((p[4] & 0x80) == 0);
	    hdrLen = 12;
	    mode = 'C';
	}
	/* H263-1996 payload header size is more than hdrLen */
    if (payload_len < hdrLen) {
	    /* Invalid bitstream, discard this payload */
	    pktz->unpack_prev_lost = PJ_TRUE;
	    return PJ_EINVAL;
    }

    /* Reset last sync point for every new picture bitstream */
    if (*pos == 0)
	    pktz->unpack_last_sync_pos = 0;

    /* Get bitstream length */
	p += hdrLen;
    if (payload_len > (pj_size_t)(p - payload)) {
	    payload_len -= (p - payload);
    } else {
	    /* Invalid bitstream, discard this payload */
	    pktz->unpack_prev_lost = PJ_TRUE;
	    return PJ_EINVAL;
    }

    /* Validate bitstream length */
    if (bits_size < *pos + payload_len + hdrLen) {
	    /* Insufficient bistream buffer, discard this payload */
	    pj_assert(!"Insufficient H.263 bitstream buffer");
	    pktz->unpack_prev_lost = PJ_TRUE;
	    return PJ_ETOOSMALL;
    }
	/* Write the payload to the bitstream */
    pj_memcpy(q, p, payload_len);
    q += payload_len;

    /* Update the bitstream writing offset */
    *pos = q - bits;

    printf("Unpack: bits: 0x%02x, p: 0x%02x, payload_len: %d, hdrLen: %d, pos: %d, bits_len: %d, iFrame:%d\n", 
	    bits, p, payload_len, hdrLen, *pos, bits_size, iFrame);
	
    pktz->unpack_prev_lost = PJ_FALSE;
	
#endif
}
/* End Hieu adding */


#endif /* PJMEDIA_HAS_VIDEO */
